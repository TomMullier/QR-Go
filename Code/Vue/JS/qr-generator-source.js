import jsPDF from 'jspdf';
import QRCode from 'qrcode';

export function createPDF(fileName, locationsArray) {
  const doc = new jsPDF();
  new Promise(async (resolve) => {
    for (let index = 0; index < locationsArray.length; index++) {
      const location = locationsArray[index];
      doc.addImage('../img/fond-page.png', 'PNG', 0, 0, 210, 297);
      doc.addFont('../fonts/Montserrat-regular.ttf', "Montserrat-regular", "normal");

      doc.setFontSize(50);
      doc.setFont('Montserrat-regular');
      const locationWithoutHyphen = location.split("-");
      const locationWithoutLongWords = [];
      locationWithoutHyphen.forEach(word => {
        word = word.trim();
        if (word.length <= 12) locationWithoutLongWords.push(word);
        else word.split(" ").forEach(shortWord => locationWithoutLongWords.push(shortWord));
      });
      locationWithoutLongWords.forEach((word, index) => {
        doc.text(word, 105, 40  + (index * 20), {align: 'center'}, null);
      });

      // add to pdf an image generated by qrcode
      const url = await createQrCode(location);
      doc.addImage(url, 'PNG', 55, 100, 100, 100);
      if (index < locationsArray.length - 1) doc.addPage();
    }
    doc.save(fileName + '.pdf');
    resolve();
  });
}

async function createQrCode(content) {
  const options = {
    errorCorrectionLevel: 'L',
    type: 'image/png',
    scale: 10,
    margin: 1,
    color: {
      dark: "#000000",
      light: "#ffffff"
    }
  };

  return await new Promise((resolve, reject) => {
    QRCode.toDataURL(content, options, (err, url) => {
      if (err) reject(err);
      else resolve(url);
    });
  });
}